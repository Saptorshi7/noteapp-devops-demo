trigger:
  branches:
    include:
      - develop
  paths:
    include:
      - infra/*

pool:
  vmImage: ubuntu-latest

variables:
  resourcegroup: terraform-state
  accountname: tfstate0911
  containername: tfstate
  key: noteapp.terraform.tfstate

stages:
  - stage: tfplan
    jobs:
      - job: plan
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: install
            inputs:
              terraformVersion: latest
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              workingDirectory: infra
              provider: azurerm
              command: init
              backendServiceArm: AzureDevOpsSubscription
              backendAzureRmResourceGroupName: $(resourcegroup)
              backendAzureRmStorageAccountName: $(accountname)
              backendAzureRmContainerName: $(containername)
              backendAzureRmKey: $(key)
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              workingDirectory: infra
              provider: azurerm
              command: validate
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              workingDirectory: infra
              provider: azurerm
              command: plan
              environmentServiceNameAzureRM: AzureDevOpsSubscription

  - stage: createPR
    dependsOn: tfplan  # This job runs only after the tfplan stage completes successfully
    condition: succeeded()  # Ensure it runs only if the previous stage (tfplan) is successful
    jobs:
      - job: createPullRequest
        steps:
          - powershell: |
              $user = ""
              $token = "$(System.AccessToken)"
              $branchTarget = "$(Build.SourceBranch)"
              $branchSource = "refs/heads/master"
              $branchTragetPath = $branchTarget -replace "refs/heads/", ""
              $teamProject = "$(System.TeamProject)"
              $repoName = "$(Build.Repository.Name)"
              $orgUrl = "$(System.CollectionUri)"

              $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user,$token)))

              $uriBranchStatus = "$orgUrl/$teamProject/_apis/git/repositories/$repoName/stats/branches?name=$branchTragetPath&api-version=5.1"
              $uriCheckActivePR = "$orgUrl/$teamProject/_apis/git/repositories/$repoName/pullrequests?searchCriteria.targetRefName=$branchTarget&searchCriteria.sourceRefName=$branchSource&api-version=5.1"
              $uriCreatePR = "$orgUrl/$teamProject/_apis/git/repositories/$repoName/pullrequests?api-version=5.1"

              $resultStatus = Invoke-RestMethod -Uri $uriBranchStatus -Method Get -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}

              if ($resultStatus.behindCount -eq 0) {
                  Write-Host "Current branch contains last changes from master"
                  Return
              }

              $resultActivePR = Invoke-RestMethod -Uri $uriCheckActivePR -Method Get -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}

              if ($resultActivePR.count -gt 0) {
                  Write-Host "PR exists already"
                  Return
              }

              $bodyCreatePR = "{sourceRefName:'$branchSource',targetRefName:'$branchTarget',title:'Sync changes from $branchSource'}"

              $result = Invoke-RestMethod -Uri $uriCreatePR -Method Post -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Body $bodyCreatePR

              Write-Host "Created PR" $result.pullRequestId
            displayName: 'Check and Create PR If Plan Is OK'
            condition: succeeded()  # Ensures this job runs only if the tfplan job is successful
